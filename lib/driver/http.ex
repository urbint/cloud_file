defmodule Cloudfile.Driver.HTTP do
  @moduledoc """
  Implements the `Cloudfile.Driver` behaviour for HTTP storage.

  This module depends on HTTPoison.

  """

  @behaviour Cloudfile.Driver

  alias Cloudfile.Driver.HTTP.Utils, as: HttpUtils

  @spec supported_schemes :: [Cloudfile.scheme]
  def supported_schemes, do: ["http", "https"]


  @doc """
  Reads from the endpoint specified by `url`. Uses a `GET` request under the
  hood.

  Errors are generated by the HTTP driver, HTTPoison, which in turn are
  forwarded along un-altered.

  """
  @spec read(Cloudfile.uri) :: {:ok, binary} | {:error, Cloudfile.reason}
  def read(url) do
    with {:ok, res} <- HTTPoison.get(url) do
      case HttpUtils.response_successful?(res) do
        true  -> {:ok, res.body}
        false -> {:error, HttpUtils.to_posix(res)}
      end
    else
      {:error, _reason} = err -> err
    end
  end


  @doc """
  Writes to the endpoint specified by `url`. Uses a `POST` request under the
  hood.

  Errors are generated by the HTTP driver, HTTPoison, which in turn are
  forwarded along un-altered.

  """
  @spec write(Cloudfile.uri, binary) :: :ok | {:error, Cloudfile.reason}
  def write(url, content) do
    with {:ok, res} <- HTTPoison.post(url, content) do
      case HttpUtils.response_successful?(res) do
        true  -> {:ok, res.body}
        false -> {:error, HttpUtils.to_posix(res)}
      end
    else
      {:error, _reason} = err -> err
    end
  end


  @doc """
  Deletes the resource specified by `url`. Uses a `DELETE` request under the
  hood, so be sure that the endpoint to which the requests are being made
  properly implements a RESTful API.

  Errors are generated by the HTTP driver, HTTPoison, which in turn are
  forwarded along un-altered.

  """
  @spec rm(Cloudfile.uri) :: :ok | {:error, Cloudfile.reason}
  def rm(url) do
    with {:ok, res} <- HTTPoison.delete(url) do
      case HttpUtils.response_successful?(res) do
        true  -> {:ok, res.body}
        false -> {:error, HttpUtils.to_posix(res)}
      end
    else
      {:error, _reason} = err -> err
    end
  end


end
